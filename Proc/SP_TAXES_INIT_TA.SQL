
/*********************************************************************************************************************/
/* Procedure: [dbo].[SP_TAXES_INIT_TA] */
CREATE OR ALTER PROCEDURE [dbo].[SP_TAXES_INIT_TA]
	@DB_TYPE VARCHAR(128),
	@REGISTER SYSNAME,
	@TAX_COLUMN SYSNAME,
	@PREF_COLUMN SYSNAME,
	@TRACE BIT = 0
AS
    DECLARE @ONLINE_SERVER SYSNAME = (SELECT SERVER_INSTANCE_NAME FROM TEST_AUTOMATION_DATASOURCES WHERE UNIQUE_ALIAS = 'VCS_OnlineDB' AND DB_TYPE = @DB_TYPE)
	DECLARE @ONLINE_DATABASE SYSNAME = (SELECT DATABASE_NAME FROM TEST_AUTOMATION_DATASOURCES WHERE UNIQUE_ALIAS = 'VCS_OnlineDB' AND DB_TYPE = @DB_TYPE)

	IF(CHARINDEX('[', @ONLINE_SERVER) = 1)
		SET @ONLINE_SERVER = PARSENAME(@ONLINE_SERVER, 1)
		
	IF(CHARINDEX('[', @ONLINE_DATABASE) = 1)
		SET @ONLINE_DATABASE = PARSENAME(@ONLINE_DATABASE, 1)

	DELETE FROM TAXES_INFO_COMMISSION_TA WHERE TAX_CODE IN (SELECT CODE FROM TAXES_INFO_TA WITH(NOLOCK) WHERE TA_TABLE = @REGISTER)
	DELETE FROM TAXES_INFO_TA WHERE TA_TABLE = @REGISTER

	DECLARE @SOURCE_SERVER_SCH SYSNAME = '['+RTRIM(@ONLINE_SERVER)+'].['+RTRIM(@ONLINE_DATABASE)+'].DBO'

	IF (@TRACE = 1)
		PRINT('Source serve schema: ' + @SOURCE_SERVER_SCH)

	DECLARE @SQL VARCHAR(MAX)

	SET @SQL = 'INSERT INTO TAXES_INFO_TA(TA_TABLE, CODE, TYPE, NAME, EVENT, DEAL_TYPE, ACUMULATIVE_TAX, DDC, CURRENCY_FOR_CHARGING, PREF_PERSENTAGE_BASE, PREF_PLAN_BASE_ON_DAILY_TURNOVER)
	SELECT DISTINCT
	'''+@REGISTER+''' AS TA_TABLE,
	TAX.TAX_CODE AS CODE,
	''Tax'' AS TYPE,
	TAX.TAX_NAME AS NAME,
	EVT.EVENT_NAME AS EVENT,
	EVT2D.DEAL_TYPE AS DEAL_TYPE,
	(CASE WHEN EVT.EVENT_TYPE IN(1, 5, 201, 366, 367, 368, 369) THEN (DBO.CHECKBIT(TAX.STATUS, 16) + 1)%2 ELSE 0 END) AS ACUMULATIVE_TAX,
	TAX.DDS_TAX AS DDC,
	2 AS CURRENCY_FOR_CHARGING, 
	NULL AS PREF_PERSENTAGE_BASE,
	NULL AS PREF_PLAN_BASE_ON_DAILY_TURNOVER
	FROM '+@REGISTER+' AS REG WITH(NOLOCK)
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAXES AS TAX WITH(NOLOCK)
	ON REG.'+@TAX_COLUMN+' = TAX.TAX_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAX_EVENTS_TO_DEALS AS EVT2D WITH(NOLOCK)
	ON TAX.EVENT_TO_DEAL_CODE = EVT2D.CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.EVT_EVENTS AS EVT WITH(NOLOCK)
	ON EVT2D.EVENT_CODE = EVT.EVENT_TYPE
	WHERE REG.'+@TAX_COLUMN+' > 0'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)

	SET @SQL = 'INSERT INTO TAXES_INFO_COMMISSION_TA(
		TAX_CODE,
		COMMISSION_CODE,
		TYPE,
		COMMISSION_ORDER,
		CONSTANT_SUM,
		PERCENTAGE,
		IS_DEFAULT_CURRENCY,
		CURRENCY,
		FROM_SUM,
		UNTIL_SUM,
		MIN_SUM,
		MAX_SUM,
		TAX_OVER_SUM,
		INCLUDE_TAX_IN_MIN_MAX,
		PREF_WITHOUT_DAILY_TURNOVER)
	SELECT DISTINCT
	REG.CODE AS TAX_CODE,
	COMM.COMMISSION_CODE AS COMMISSION_CODE,
	REG.TYPE AS TYPE,
	ROW_NUMBER() OVER(PARTITION BY REG.CODE, CURR.INI ORDER BY REG.CODE, CURR.INI) AS COMMISSION_ORDER,
	COMM.CONSTTAX_SUM AS CONSTANT_SUM,
	COMM.COMMISSION_PERCENT AS PERCENTAGE,
	ITEMS.TYPE_COMMISSION AS IS_DEFAULT_CURRENCY,
	CURR.INI AS CURRENCY,
	CASE LAG(COMM.COMMISSION_CODE, 1, 0) OVER (ORDER BY REG.CODE, CURR.INI, COMM.COMMISSION_CODE, COMM.UP_TO_SUM) WHEN COMM.COMMISSION_CODE THEN 0.01 + LAG(COMM.UP_TO_SUM, 1, 0) OVER (ORDER BY REG.CODE, CURR.INI, COMM.COMMISSION_CODE, COMM.UP_TO_SUM) ELSE 0 END AS FROM_SUM,
	COMM.UP_TO_SUM AS UNTIL_SUM,
	COMM.MINIMUM_SUM AS MIN_SUM,
	COMM.MAXIMUM_SUM AS MAX_SUM,
	COMM.COMMISSION_FLAGS & 1 AS TAX_OVER_SUM,
	COMM.COMMISSION_FLAGS & 4 AS INCLUDE_TAX_IN_MIN_MAX,
	NULL AS PREF_WITHOUT_DAILY_TURNOVER
	FROM TAXES_INFO_TA AS REG WITH(NOLOCK)
	INNER JOIN 
	(
		SELECT TAX_CODE, MAX(DATE) AS DATE
		FROM '+@SOURCE_SERVER_SCH+'.TAX_PLAN_COMMISSIONS WITH(NOLOCK)
		GROUP BY TAX_CODE) AS PLN_DATE
	ON REG.CODE = PLN_DATE.TAX_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAX_PLAN_COMMISSIONS AS PLN WITH(NOLOCK)
	ON PLN_DATE.TAX_CODE = PLN.TAX_CODE AND PLN_DATE.DATE = PLN.DATE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAX_PLAN_COMMISSIONS_ITEMS AS ITEMS WITH(NOLOCK)
	ON PLN.ID = ITEMS.ID_PLAN
	INNER JOIN '+@SOURCE_SERVER_SCH+'.NM137 AS COMM WITH(NOLOCK)
	ON ITEMS.COMMISSION_GROUP_CODE = COMM.COMMISSION_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.DT008 AS CURR WITH(NOLOCK)
	ON COMM.CURRENCY = CURR.CODE 
	WHERE REG.TA_TABLE = '''+@REGISTER+'''
	AND REG.TYPE = ''Tax''
	ORDER BY REG.CODE, CURR.INI, COMM.COMMISSION_CODE, COMM.UP_TO_SUM'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)

	SET @SQL = 'INSERT INTO TAXES_INFO_TA(TA_TABLE, CODE, TYPE, NAME, EVENT, DEAL_TYPE, ACUMULATIVE_TAX, DDC, CURRENCY_FOR_CHARGING, PREF_PERSENTAGE_BASE, PREF_PLAN_BASE_ON_DAILY_TURNOVER)
	SELECT DISTINCT
	'''+@REGISTER+''' AS TA_TABLE,
	PREF.CODE AS CODE,
	''Pref'',
	PREF.PREFERENCE_NAME AS NAME,
	EVT.EVENT_NAME AS EVENT,
	PREF.DEAL_TYPE AS DEAL_TYPE,
	0 AS ACUMULATIVE_TAX,
	0 AS DDC,
	2 AS CURRENCY_FOR_CHARGING, 
	DBO.CHECKBIT(HDR.STATUS, 15) AS PREF_PERSENTAGE_BASE,
	DBO.CHECKBIT(HDR.STATUS, 16) AS PREF_PLAN_BASE_ON_DAILY_TURNOVER
	FROM '+@REGISTER+' AS REG WITH(NOLOCK)
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_TAXES AS PREF WITH(NOLOCK)
	ON REG.'+@PREF_COLUMN+' = PREF.CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_EVENTS_TAXES AS PREF_EVT WITH(NOLOCK)
	ON PREF.CODE = PREF_EVT.PREFERENCE_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.EVT_EVENTS AS EVT WITH(NOLOCK)
	ON PREF_EVT.EVENT_CODE = EVT.EVENT_TYPE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_PLANS_HDR AS HDR WITH(NOLOCK)
	ON PREF_EVT.PREF_PLAN_CODE = HDR.CODE
	WHERE PREF.PREFERENCE_STATUS = 1 AND PREF.DATE_VALID_TO >= GETDATE()
	AND REG.'+@PREF_COLUMN+' > 0'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)

	SET @SQL = 'INSERT INTO TAXES_INFO_COMMISSION_TA(
		TAX_CODE,
		COMMISSION_CODE,
		TYPE,
		COMMISSION_ORDER,
		CONSTANT_SUM,
		PERCENTAGE,
		IS_DEFAULT_CURRENCY,
		CURRENCY,
		FROM_SUM,
		UNTIL_SUM,
		MIN_SUM,
		MAX_SUM,
		TAX_OVER_SUM,
		INCLUDE_TAX_IN_MIN_MAX,
		PREF_WITHOUT_DAILY_TURNOVER)
	SELECT
	REG.CODE AS TAX_CODE,
	DTL.CODE AS COMMISSION_CODE,
	REG.TYPE AS TYPE,
	ROW_NUMBER() OVER(PARTITION BY REG.CODE ORDER BY REG.CODE) AS COMMISSION_ORDER,
	CASE DTL.PREFERENCE_TYPE WHEN 1 THEN DTL.SUM_SOLID ELSE -1 END AS CONSTANT_SUM,
	CASE DTL.PREFERENCE_TYPE WHEN 0 THEN DTL.[PERCENT] ELSE -1 END AS PERCENTAGE,
	1 AS IS_DEFAULT_CURRENCY,
	''X'' AS CURRENCY,
	DTL.SUM_FOR_TAX_OVER + 0.01 AS FROM_SUM,
	CASE LEAD(DTL.PREFERENCE_CODE, 1, 0) OVER (ORDER BY REG.CODE, DTL.CODE, DTL.SUM_FOR_TAX_OVER) WHEN DTL.PREFERENCE_CODE THEN LEAD(DTL.SUM_FOR_TAX_OVER, 1, 0) OVER (ORDER BY REG.CODE, DTL.CODE, DTL.SUM_FOR_TAX_OVER) ELSE 99999999999 END AS UNTIL_SUM,
	DTL.MIN_SUM AS MIN_SUM,
	DTL.MAX_SUM AS MAX_SUM,
	0 AS TAX_OVER_SUM,
	0 AS INCLUDE_TAX_IN_MIN_MAX,
	DBO.CHECKBIT(DTL.STATUS, 16) AS PREF_WITHOUT_DAILY_TURNOVER
	FROM TAXES_INFO_TA AS REG WITH(NOLOCK)
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_EVENTS_TAXES AS PREF_EVT WITH(NOLOCK)
	ON REG.CODE = PREF_EVT.PREFERENCE_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_PLANS_HDR AS HDR WITH(NOLOCK)
	ON PREF_EVT.PREF_PLAN_CODE = HDR.CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_PLANS AS DTL WITH(NOLOCK)
	ON HDR.CODE = DTL.CODE_PREF_PLAN_HRD
	WHERE REG.TA_TABLE = '''+@REGISTER+'''
	AND REG.TYPE = ''Pref''
	AND PREF_EVT.TAX_CODE > 0
	ORDER BY REG.CODE, DTL.CODE, DTL.SUM_FOR_TAX_OVER'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)
GO