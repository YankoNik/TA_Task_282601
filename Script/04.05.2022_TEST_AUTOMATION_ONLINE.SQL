/***************************************************************************************************************/
-- Име          : Стоян Серафимов
-- Дата и час   : 04.05.2022
-- Задача       : 
-- Класификация : TestAutomation
-- Описание     : TestAutomation
-- Параметри    : Няма
/***************************************************************************************************************/
CREATE OR ALTER FUNCTION [dbo].[TRANS_VAL_TO_VAL_TA]( @SUMA AS FLOAT, @VAL AS CHAR(3), @VAL1 AS CHAR(3) )
RETURNS FLOAT
AS
BEGIN
	IF( @SUMA IS NULL OR @SUMA = 0.0 )
		RETURN 0.0

	DECLARE @FIXING AS FLOAT, @BASE AS INT, @FIXING1 AS FLOAT, @BASE1 AS INT, @PRE AS SMALLINT

	SELECT	@FIXING1 = [FIXING], @BASE1 = [BASE] , @PRE = NULL
	FROM 	[CURRENCIES_TA] WITH (NOLOCK)
	WHERE	[CODE] = @VAL1

	/* Ако двете валути са еднакви връщаме входната сума */
	IF( @VAL IS NULL OR @VAL = @VAL1 )
		RETURN ROUND( ISNULL( @SUMA, 0.0 ), ISNULL( @PRE , 2 ))

	SELECT	@FIXING = [FIXING], @BASE = [BASE]
	FROM 	[CURRENCIES_TA] WITH (NOLOCK)
	WHERE	[CODE] = @VAL

	IF( ISNULL ( @BASE , 0.0 ) = 0.0 OR ISNULL ( @BASE1 , 0.0 ) = 0.0 OR ISNULL ( @FIXING , 0.0 ) = 0.0 OR ISNULL ( @FIXING1 , 0.0 ) = 0.0 )
		RETURN 0.0

	RETURN ROUND( ( @FIXING / @BASE ) * @SUMA / ( @FIXING1 / @BASE1 ) ,  ISNULL( @PRE , 2 ) )
END
GO

CREATE OR ALTER FUNCTION [dbo].[FN_TAXES_CALCULATE_PREFFERENCE_TA](
	@ROW_ID INT,
	@AMOUNT FLOAT,
	@ACCUMULATED_AMOUNT FLOAT,
	@ACCUMULATED_TAX FLOAT,
	@CURRENCY_CODE CHAR(3))
RETURNS FLOAT
AS
BEGIN 
	DECLARE @RESULT FLOAT = 0

	DECLARE @TAX_CODE INT = 0
	DECLARE @IS_DEFAULT_CURRENCY INT = 0
	DECLARE @COMMISSION_ORDER INT = 0
	DECLARE @CONSTANT_SUM FLOAT = 0
	DECLARE @PERCENTAGE FLOAT = 0
	DECLARE @CURRENCY CHAR(3) = 'X'
	DECLARE @FROM_SUM FLOAT = 0
	DECLARE @UNTIL_SUM FLOAT = 0
	DECLARE @MIN_SUM FLOAT = 0
	DECLARE @MAX_SUM FLOAT = 0
	DECLARE @PREF_WITHOUT_DAILY_TURNOVER INT = 0
	DECLARE @PREF_PERSENTAGE_BASE INT = 0
	DECLARE @PREF_PLAN_BASE_ON_DAILY_TURNOVER INT = 0

	SELECT TOP 1
		@TAX_CODE = DTL.TAX_CODE,
		@IS_DEFAULT_CURRENCY = DTL.IS_DEFAULT_CURRENCY,
		@COMMISSION_ORDER = DTL.COMMISSION_ORDER,
		@CONSTANT_SUM = DTL.CONSTANT_SUM,
		@PERCENTAGE = DTL.PERCENTAGE/100,
		@CURRENCY = (CASE DTL.CURRENCY WHEN 'X' THEN @CURRENCY_CODE ELSE DTL.CURRENCY END), 
		@FROM_SUM = DTL.FROM_SUM,
		@UNTIL_SUM = DTL.UNTIL_SUM,
		@MIN_SUM = DTL.MIN_SUM,
		@MAX_SUM = DTL.MAX_SUM,
		@PREF_WITHOUT_DAILY_TURNOVER = DTL.PREF_WITHOUT_DAILY_TURNOVER,
		@PREF_PERSENTAGE_BASE = HDR.PREF_PERSENTAGE_BASE,
		@PREF_PLAN_BASE_ON_DAILY_TURNOVER = HDR.PREF_PLAN_BASE_ON_DAILY_TURNOVER
	FROM TAXES_INFO_COMMISSION_TA AS DTL WITH(NOLOCK)
	INNER JOIN TAXES_INFO_TA AS HDR WITH(NOLOCK)
	ON DTL.TAX_CODE = HDR.CODE AND DTL.TYPE = HDR.TYPE
	WHERE DTL.ROW_ID = @ROW_ID

	DECLARE @AMOUNT_IN_TAX_CURRENCY FLOAT = DBO.TRANS_VAL_TO_VAL_TA(@AMOUNT, @CURRENCY_CODE, @CURRENCY) 
	DECLARE @ACCUMULATED_AMOUNT_IN_TAX_CURRENCY FLOAT = DBO.TRANS_VAL_TO_VAL_TA(@ACCUMULATED_AMOUNT, @CURRENCY_CODE, @CURRENCY) 
	DECLARE @ACCUMULATED_TAX_IN_TAX_CURRENCY FLOAT = DBO.TRANS_VAL_TO_VAL_TA(@ACCUMULATED_TAX, @CURRENCY_CODE, @CURRENCY) 
	

	IF (@PREF_PLAN_BASE_ON_DAILY_TURNOVER > 0)
	BEGIN 
		IF (@AMOUNT_IN_TAX_CURRENCY + @ACCUMULATED_AMOUNT_IN_TAX_CURRENCY < @FROM_SUM OR
			@AMOUNT_IN_TAX_CURRENCY + @ACCUMULATED_AMOUNT_IN_TAX_CURRENCY > @UNTIL_SUM)
			RETURN @RESULT
	END
	ELSE 
	BEGIN 
		IF (@AMOUNT_IN_TAX_CURRENCY < @FROM_SUM OR
			 @AMOUNT_IN_TAX_CURRENCY > @UNTIL_SUM)
			RETURN @RESULT
	END
	
	IF (@PERCENTAGE > 0)
	BEGIN 
		IF (@PREF_PERSENTAGE_BASE <= 0)
			SET @RESULT = @AMOUNT_IN_TAX_CURRENCY*@PERCENTAGE
		ELSE IF (@PREF_WITHOUT_DAILY_TURNOVER <= 0)
			SET @RESULT = (@AMOUNT_IN_TAX_CURRENCY + @ACCUMULATED_AMOUNT_IN_TAX_CURRENCY)*@PERCENTAGE - @ACCUMULATED_TAX_IN_TAX_CURRENCY
		ELSE
			SET @RESULT = @AMOUNT_IN_TAX_CURRENCY*@PERCENTAGE
	END
	ELSE IF (@CONSTANT_SUM > 0)
	BEGIN 
		SET @RESULT = @CONSTANT_SUM
	END

	IF (@MIN_SUM > 0 AND @RESULT < @MIN_SUM)
		SET @RESULT = @MIN_SUM

	IF (@MAX_SUM > 0 AND @RESULT > @MAX_SUM)
		SET @RESULT = @MAX_SUM

	IF (@RESULT < 0)
		SET @RESULT = 0

	RETURN @RESULT
END
GO

CREATE OR ALTER FUNCTION [dbo].[FN_TAXES_CALCULATE_COMMISSION_TA](
	@ROW_ID INT,
	@AMOUNT FLOAT,
	@ACCUMULATED_AMOUNT FLOAT,
	@ACCUMULATED_TAX FLOAT,
	@CURRENCY_CODE CHAR(3))
RETURNS FLOAT
AS
BEGIN 
	DECLARE @RESULT FLOAT = 0

	DECLARE @TAX_CODE INT
	DECLARE @IS_DEFAULT_CURRENCY INT
	DECLARE @COMMISSION_ORDER INT
	DECLARE @CONSTANT_SUM FLOAT
	DECLARE @PERCENTAGE FLOAT
	DECLARE @CURRENCY CHAR(3)
	DECLARE @FROM_SUM FLOAT
	DECLARE @UNTIL_SUM FLOAT
	DECLARE @MIN_SUM FLOAT
	DECLARE @MAX_SUM FLOAT
	DECLARE @TAX_OVER_SUM INT
	DECLARE @INCLUDE_TAX_IN_MIN_MAX INT

	SELECT 
		@TAX_CODE = TAX_CODE,
		@IS_DEFAULT_CURRENCY = IS_DEFAULT_CURRENCY,
		@COMMISSION_ORDER = COMMISSION_ORDER,
		@CONSTANT_SUM = CONSTANT_SUM,
		@PERCENTAGE = PERCENTAGE/100,
		@CURRENCY = (CASE CURRENCY WHEN 'X' THEN @CURRENCY_CODE ELSE CURRENCY END), 
		@FROM_SUM = FROM_SUM,
		@UNTIL_SUM = UNTIL_SUM,
		@MIN_SUM = MIN_SUM,
		@MAX_SUM = MAX_SUM,
		@TAX_OVER_SUM = TAX_OVER_SUM,
		@INCLUDE_TAX_IN_MIN_MAX = INCLUDE_TAX_IN_MIN_MAX
	FROM TAXES_INFO_COMMISSION_TA WITH(NOLOCK)
	WHERE ROW_ID = @ROW_ID

	DECLARE @ACCUMULATED_AMOUNT_IN_TAX_CURRENCY FLOAT = [dbo].[TRANS_VAL_TO_VAL_TA](@ACCUMULATED_AMOUNT + @AMOUNT, @CURRENCY_CODE, @CURRENCY) 

	IF (@ACCUMULATED_AMOUNT_IN_TAX_CURRENCY < @FROM_SUM OR
		@ACCUMULATED_AMOUNT_IN_TAX_CURRENCY > @UNTIL_SUM)
		RETURN @RESULT

	IF (@TAX_OVER_SUM <= 0)
	BEGIN

		IF (@INCLUDE_TAX_IN_MIN_MAX > 0 AND @CONSTANT_SUM > 0)
			SET @RESULT = @RESULT + @CONSTANT_SUM

		IF (@PERCENTAGE > 0)
			SET @RESULT = @RESULT + @ACCUMULATED_AMOUNT_IN_TAX_CURRENCY*@PERCENTAGE

		IF (@MIN_SUM > 0 AND @RESULT < @MIN_SUM)
			SET @RESULT = @MIN_SUM

		IF (@MAX_SUM > 0 AND @RESULT > @MAX_SUM)
			SET @RESULT = @MAX_SUM

		IF (@INCLUDE_TAX_IN_MIN_MAX <= 0 AND @CONSTANT_SUM > 0)
			SET @RESULT = @RESULT + @CONSTANT_SUM
	END
	ELSE
	BEGIN

		IF (@INCLUDE_TAX_IN_MIN_MAX > 0 AND @CONSTANT_SUM > 0)
			SET @RESULT = @RESULT + @CONSTANT_SUM

		IF (@FROM_SUM IS NULL)
			RETURN @RESULT

		IF (@PERCENTAGE > 0)
			SET @RESULT = @RESULT + (@ACCUMULATED_AMOUNT_IN_TAX_CURRENCY - @FROM_SUM - 0.01)*@PERCENTAGE

		IF (@ACCUMULATED_TAX > 0)
			SET @RESULT = @RESULT - @ACCUMULATED_TAX

		IF (@MIN_SUM > 0 AND @RESULT + @ACCUMULATED_TAX < @MIN_SUM)
			SET @RESULT = @MIN_SUM - @ACCUMULATED_TAX

		IF (@MAX_SUM > 0 AND @RESULT + @ACCUMULATED_TAX > @MAX_SUM)
			SET @RESULT = @MAX_SUM - @ACCUMULATED_TAX

		IF (@INCLUDE_TAX_IN_MIN_MAX <= 0 AND @CONSTANT_SUM > 0)
			SET @RESULT = @RESULT + @CONSTANT_SUM
	END


	IF (@RESULT < 0)
		SET @RESULT = 0

	RETURN @RESULT
END
GO


CREATE OR ALTER PROCEDURE [dbo].[SP_TAXES_CALCULATE_TA]
	@ROW_ID INT,
	@REGISTER SYSNAME,
	@RESULT VARCHAR(255) = NULL OUT,
	@UPDATE_REGISTER BIT = 1,
	@DATE DATE = NULL,
	@TRACE BIT = 0
AS
	IF (@REGISTER = 'PREV_COMMON_TA')
		EXEC [SP_TAXES_CALCULATE_PREV_COMMON_TA] @ROW_ID, @RESULT OUT, @UPDATE_REGISTER, @DATE, @TRACE

	--ELSE IF (@REGISTER = 'VAL_PREV_TA')
	--	EXEC [SP_TAXES_CALCULATE_VAL_PREV_TA] @ROW_ID, @RESULT OUT
	ELSE
		SET @RESULT = NULL
GO

CREATE OR ALTER PROCEDURE [dbo].[SP_DEALS_GET_DEAL_CURRENCY_CODE]
	@ID INT,
	@TYPE INT,
	@RESULT CHAR(3) OUT,
	@TRACE BIT = 0
AS
	IF (@TYPE = 1)
		SELECT @RESULT = UI_CURRENCY_CODE FROM RAZPREG_TA WITH(NOLOCK) WHERE ROW_ID = @ID
	--ELSE IF (@TYPE = 2)
	--	SELECT @RESULT...
	ELSE
		SET @RESULT = 'X'
GO

CREATE OR ALTER PROCEDURE [dbo].[SP_TAXES_CALCULATE_PREV_COMMON_TA]
	@ROW_ID INT,
	@RESULT VARCHAR(255) = NULL OUT,
	@UPDATE_REGISTER BIT = 1,
	@DATE DATE = NULL,
	@TRACE BIT = 0
AS
	IF (@DATE IS NULL)
		SET @DATE = CAST(GETDATE() AS DATE)

	DECLARE @REF_ID INT = -1
	DECLARE @DEAL_TYPE INT = -1
	DECLARE @TAX_CODE INT = -1
	DECLARE @PREF_CODE INT = -1
	DECLARE @UI_SUM FLOAT = 0
	DECLARE @TA_TYPE VARCHAR(50)

	SELECT 
	@REF_ID = REF_ID, 
	@DEAL_TYPE = DEAL_TYPE,
	@TAX_CODE = ISNULL(TAX_CODE, 0),
	@PREF_CODE = ISNULL(PREF_CODE, 0),
	@UI_SUM = CONVERT(FLOAT, REPLACE(UI_SUM, ' ', '')),
	@TA_TYPE = TA_TYPE
	FROM PREV_COMMON_TA WITH(NOLOCK) 
	WHERE ROW_ID = @ROW_ID

	DECLARE @DEAL_CURRENCY_CODE CHAR(3)
	EXEC SP_DEALS_GET_DEAL_CURRENCY_CODE @REF_ID, @DEAL_TYPE, @DEAL_CURRENCY_CODE OUT

	DECLARE @COLLECT_CURRENCY_CODE CHAR(3) = (SELECT CURRENCY FROM DEALS_CORR_TA WITH(NOLOCK) WHERE REF_ID = @REF_ID AND TA_TYPE = @TA_TYPE AND UI_DEAL_TYPE = @DEAL_TYPE AND DB_CORR_TYPE = 3/*Обслужване на такси*/)

	IF (@COLLECT_CURRENCY_CODE IS NULL)
		SET @COLLECT_CURRENCY_CODE = @DEAL_CURRENCY_CODE

	DECLARE @TAX_COMMISSIONS_TABLE  TABLE(ROW_ID INT, COMMISSION_ORDER INT)

	DECLARE @ACCUMULATED_AMOUNT FLOAT = 0
	DECLARE @ACCUMULATED_TAX FLOAT = 0
	DECLARE @TEMP_RESULT FLOAT = 0

	IF (@PREF_CODE > 0)
	BEGIN
		INSERT INTO @TAX_COMMISSIONS_TABLE
			SELECT ROW_ID, COMMISSION_ORDER FROM TAXES_INFO_COMMISSION_TA WITH(NOLOCK)
			WHERE TAX_CODE = @PREF_CODE
			AND TYPE = 'Pref'
			AND IS_DEFAULT_CURRENCY = 1
			ORDER BY COMMISSION_ORDER

		IF EXISTS (SELECT * FROM TAXES_INFO_TA WITH(NOLOCK) WHERE PREF_PLAN_BASE_ON_DAILY_TURNOVER > 0 AND CODE = @PREF_CODE AND TYPE = 'Pref')
			SELECT 
			@ACCUMULATED_AMOUNT = SUM(CONVERT(FLOAT, REPLACE(A.UI_SUM, ' ', ''))),
			@ACCUMULATED_TAX = SUM(A.TAX_SUM)
			FROM PREV_COMMON_TA AS A WITH(NOLOCK)
			INNER JOIN PREV_COMMON_TA AS B WITH(NOLOCK)
			ON A.REF_ID = B.REF_ID AND  A.DEAL_TYPE = B.DEAL_TYPE
			WHERE B.ROW_ID = @ROW_ID
			AND A.RUNNING_ORDER < B.RUNNING_ORDER
			AND A.PREF_CODE = B.PREF_CODE
			AND @DATE = CAST(A.TEST_STATUS_HIST AS DATE)

		SET @ACCUMULATED_TAX = DBO.TRANS_VAL_TO_VAL_TA(@ACCUMULATED_TAX, @COLLECT_CURRENCY_CODE, @DEAL_CURRENCY_CODE)

		SELECT @TEMP_RESULT = SUM(DBO.FN_TAXES_CALCULATE_PREFFERENCE_TA(ROW_ID, @UI_SUM, ISNULL(@ACCUMULATED_AMOUNT, 0), ISNULL(@ACCUMULATED_TAX, 0), @DEAL_CURRENCY_CODE))
		FROM @TAX_COMMISSIONS_TABLE
	END
	ELSE IF (@TAX_CODE > 0)
	BEGIN
		INSERT INTO @TAX_COMMISSIONS_TABLE
			SELECT ROW_ID, COMMISSION_ORDER FROM TAXES_INFO_COMMISSION_TA WITH(NOLOCK)
			WHERE TAX_CODE = @TAX_CODE
			AND TYPE = 'Tax'
			AND IS_DEFAULT_CURRENCY = 0
			AND CURRENCY = @DEAL_CURRENCY_CODE
			ORDER BY COMMISSION_ORDER

		IF NOT EXISTS (SELECT TOP 1 * FROM @TAX_COMMISSIONS_TABLE)
			INSERT INTO @TAX_COMMISSIONS_TABLE
				SELECT ROW_ID, COMMISSION_ORDER FROM TAXES_INFO_COMMISSION_TA WITH(NOLOCK)
				WHERE TAX_CODE = @TAX_CODE
				AND TYPE = 'Tax'
				AND IS_DEFAULT_CURRENCY = 1
				ORDER BY COMMISSION_ORDER

		IF EXISTS (SELECT * FROM TAXES_INFO_TA WITH(NOLOCK) WHERE ACUMULATIVE_TAX > 0 AND CODE = @TAX_CODE AND TYPE = 'Tax')
			SELECT 
			@ACCUMULATED_AMOUNT = SUM(CONVERT(FLOAT, REPLACE(A.UI_SUM, ' ', ''))),
			@ACCUMULATED_TAX = SUM(A.TAX_SUM)
			FROM PREV_COMMON_TA AS A WITH(NOLOCK)
			INNER JOIN PREV_COMMON_TA AS B WITH(NOLOCK)
			ON A.REF_ID = B.REF_ID AND  A.DEAL_TYPE = B.DEAL_TYPE
			WHERE B.ROW_ID = @ROW_ID
			AND A.RUNNING_ORDER < B.RUNNING_ORDER
			AND A.TAX_CODE = B.TAX_CODE
			AND @DATE = CAST(A.TEST_STATUS_HIST AS DATE)

		SET @ACCUMULATED_TAX = DBO.TRANS_VAL_TO_VAL_TA(@ACCUMULATED_TAX, @COLLECT_CURRENCY_CODE, @DEAL_CURRENCY_CODE)

		SELECT @TEMP_RESULT = SUM(DBO.FN_TAXES_CALCULATE_COMMISSION_TA(ROW_ID, @UI_SUM, ISNULL(@ACCUMULATED_AMOUNT, 0), ISNULL(@ACCUMULATED_TAX, 0), @DEAL_CURRENCY_CODE))
		FROM @TAX_COMMISSIONS_TABLE
	END

	SET @TEMP_RESULT = DBO.TRANS_VAL_TO_VAL_TA(@TEMP_RESULT, @DEAL_CURRENCY_CODE, @COLLECT_CURRENCY_CODE)

	SET @RESULT = LTRIM(STR(@TEMP_RESULT, 20, 2))

	IF (@TRACE = 1)
		PRINT('Calculated tax amout: ' + @COLLECT_CURRENCY_CODE + ' ' + LTRIM(STR(@TEMP_RESULT, 20, 2)))

	IF (@UPDATE_REGISTER = 1)
		UPDATE PREV_COMMON_TA SET TAX_SUM = @TEMP_RESULT WHERE ROW_ID = @ROW_ID
GO

CREATE OR ALTER PROCEDURE [dbo].[SP_TAXES_INIT_TA]
	@DB_TYPE VARCHAR(128),
	@REGISTER SYSNAME,
	@TAX_COLUMN SYSNAME,
	@PREF_COLUMN SYSNAME,
	@TRACE BIT = 0
AS
    DECLARE @ONLINE_SERVER SYSNAME = (SELECT SERVER_INSTANCE_NAME FROM TEST_AUTOMATION_DATASOURCES WHERE UNIQUE_ALIAS = 'VCS_OnlineDB' AND DB_TYPE = @DB_TYPE)
	DECLARE @ONLINE_DATABASE SYSNAME = (SELECT DATABASE_NAME FROM TEST_AUTOMATION_DATASOURCES WHERE UNIQUE_ALIAS = 'VCS_OnlineDB' AND DB_TYPE = @DB_TYPE)

	IF(CHARINDEX('[', @ONLINE_SERVER) = 1)
		SET @ONLINE_SERVER = PARSENAME(@ONLINE_SERVER, 1)
		
	IF(CHARINDEX('[', @ONLINE_DATABASE) = 1)
		SET @ONLINE_DATABASE = PARSENAME(@ONLINE_DATABASE, 1)

	DELETE FROM TAXES_INFO_COMMISSION_TA WHERE TAX_CODE IN (SELECT CODE FROM TAXES_INFO_TA WITH(NOLOCK) WHERE TA_TABLE = @REGISTER)
	DELETE FROM TAXES_INFO_TA WHERE TA_TABLE = @REGISTER

	DECLARE @SOURCE_SERVER_SCH SYSNAME = '['+RTRIM(@ONLINE_SERVER)+'].['+RTRIM(@ONLINE_DATABASE)+'].DBO'

	IF (@TRACE = 1)
		PRINT('Source serve schema: ' + @SOURCE_SERVER_SCH)

	DECLARE @SQL VARCHAR(MAX)

	SET @SQL = 'INSERT INTO TAXES_INFO_TA(TA_TABLE, CODE, TYPE, NAME, EVENT, DEAL_TYPE, ACUMULATIVE_TAX, DDC, CURRENCY_FOR_CHARGING, PREF_PERSENTAGE_BASE, PREF_PLAN_BASE_ON_DAILY_TURNOVER)
	SELECT DISTINCT
	'''+@REGISTER+''' AS TA_TABLE,
	TAX.TAX_CODE AS CODE,
	''Tax'' AS TYPE,
	TAX.TAX_NAME AS NAME,
	EVT.EVENT_NAME AS EVENT,
	EVT2D.DEAL_TYPE AS DEAL_TYPE,
	(CASE WHEN EVT.EVENT_TYPE IN(1, 5, 201, 366, 367, 368, 369) THEN (DBO.CHECKBIT(TAX.STATUS, 16) + 1)%2 ELSE 0 END) AS ACUMULATIVE_TAX,
	TAX.DDS_TAX AS DDC,
	2 AS CURRENCY_FOR_CHARGING, 
	NULL AS PREF_PERSENTAGE_BASE,
	NULL AS PREF_PLAN_BASE_ON_DAILY_TURNOVER
	FROM '+@REGISTER+' AS REG WITH(NOLOCK)
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAXES AS TAX WITH(NOLOCK)
	ON REG.'+@TAX_COLUMN+' = TAX.TAX_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAX_EVENTS_TO_DEALS AS EVT2D WITH(NOLOCK)
	ON TAX.EVENT_TO_DEAL_CODE = EVT2D.CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.EVT_EVENTS AS EVT WITH(NOLOCK)
	ON EVT2D.EVENT_CODE = EVT.EVENT_TYPE
	WHERE REG.'+@TAX_COLUMN+' > 0'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)

	SET @SQL = 'INSERT INTO TAXES_INFO_COMMISSION_TA(
		TAX_CODE,
		COMMISSION_CODE,
		TYPE,
		COMMISSION_ORDER,
		CONSTANT_SUM,
		PERCENTAGE,
		IS_DEFAULT_CURRENCY,
		CURRENCY,
		FROM_SUM,
		UNTIL_SUM,
		MIN_SUM,
		MAX_SUM,
		TAX_OVER_SUM,
		INCLUDE_TAX_IN_MIN_MAX,
		PREF_WITHOUT_DAILY_TURNOVER)
	SELECT DISTINCT
	REG.CODE AS TAX_CODE,
	COMM.COMMISSION_CODE AS COMMISSION_CODE,
	REG.TYPE AS TYPE,
	ROW_NUMBER() OVER(PARTITION BY REG.CODE, CURR.INI ORDER BY REG.CODE, CURR.INI) AS COMMISSION_ORDER,
	COMM.CONSTTAX_SUM AS CONSTANT_SUM,
	COMM.COMMISSION_PERCENT AS PERCENTAGE,
	ITEMS.TYPE_COMMISSION AS IS_DEFAULT_CURRENCY,
	CURR.INI AS CURRENCY,
	CASE LAG(COMM.COMMISSION_CODE, 1, 0) OVER (ORDER BY REG.CODE, CURR.INI, COMM.COMMISSION_CODE, COMM.UP_TO_SUM) WHEN COMM.COMMISSION_CODE THEN 0.01 + LAG(COMM.UP_TO_SUM, 1, 0) OVER (ORDER BY REG.CODE, CURR.INI, COMM.COMMISSION_CODE, COMM.UP_TO_SUM) ELSE 0 END AS FROM_SUM,
	COMM.UP_TO_SUM AS UNTIL_SUM,
	COMM.MINIMUM_SUM AS MIN_SUM,
	COMM.MAXIMUM_SUM AS MAX_SUM,
	COMM.COMMISSION_FLAGS & 1 AS TAX_OVER_SUM,
	COMM.COMMISSION_FLAGS & 4 AS INCLUDE_TAX_IN_MIN_MAX,
	NULL AS PREF_WITHOUT_DAILY_TURNOVER
	FROM TAXES_INFO_TA AS REG WITH(NOLOCK)
	INNER JOIN 
	(
		SELECT TAX_CODE, MAX(DATE) AS DATE
		FROM '+@SOURCE_SERVER_SCH+'.TAX_PLAN_COMMISSIONS WITH(NOLOCK)
		GROUP BY TAX_CODE) AS PLN_DATE
	ON REG.CODE = PLN_DATE.TAX_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAX_PLAN_COMMISSIONS AS PLN WITH(NOLOCK)
	ON PLN_DATE.TAX_CODE = PLN.TAX_CODE AND PLN_DATE.DATE = PLN.DATE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.TAX_PLAN_COMMISSIONS_ITEMS AS ITEMS WITH(NOLOCK)
	ON PLN.ID = ITEMS.ID_PLAN
	INNER JOIN '+@SOURCE_SERVER_SCH+'.NM137 AS COMM WITH(NOLOCK)
	ON ITEMS.COMMISSION_GROUP_CODE = COMM.COMMISSION_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.DT008 AS CURR WITH(NOLOCK)
	ON COMM.CURRENCY = CURR.CODE 
	WHERE REG.TA_TABLE = '''+@REGISTER+'''
	AND REG.TYPE = ''Tax''
	ORDER BY REG.CODE, CURR.INI, COMM.COMMISSION_CODE, COMM.UP_TO_SUM'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)

	SET @SQL = 'INSERT INTO TAXES_INFO_TA(TA_TABLE, CODE, TYPE, NAME, EVENT, DEAL_TYPE, ACUMULATIVE_TAX, DDC, CURRENCY_FOR_CHARGING, PREF_PERSENTAGE_BASE, PREF_PLAN_BASE_ON_DAILY_TURNOVER)
	SELECT DISTINCT
	'''+@REGISTER+''' AS TA_TABLE,
	PREF.CODE AS CODE,
	''Pref'',
	PREF.PREFERENCE_NAME AS NAME,
	EVT.EVENT_NAME AS EVENT,
	PREF.DEAL_TYPE AS DEAL_TYPE,
	0 AS ACUMULATIVE_TAX,
	0 AS DDC,
	2 AS CURRENCY_FOR_CHARGING, 
	DBO.CHECKBIT(HDR.STATUS, 15) AS PREF_PERSENTAGE_BASE,
	DBO.CHECKBIT(HDR.STATUS, 16) AS PREF_PLAN_BASE_ON_DAILY_TURNOVER
	FROM '+@REGISTER+' AS REG WITH(NOLOCK)
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_TAXES AS PREF WITH(NOLOCK)
	ON REG.'+@PREF_COLUMN+' = PREF.CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_EVENTS_TAXES AS PREF_EVT WITH(NOLOCK)
	ON PREF.CODE = PREF_EVT.PREFERENCE_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.EVT_EVENTS AS EVT WITH(NOLOCK)
	ON PREF_EVT.EVENT_CODE = EVT.EVENT_TYPE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_PLANS_HDR AS HDR WITH(NOLOCK)
	ON PREF_EVT.PREF_PLAN_CODE = HDR.CODE
	WHERE PREF.PREFERENCE_STATUS = 1 AND PREF.DATE_VALID_TO >= GETDATE()
	AND REG.'+@PREF_COLUMN+' > 0'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)

	SET @SQL = 'INSERT INTO TAXES_INFO_COMMISSION_TA(
		TAX_CODE,
		COMMISSION_CODE,
		TYPE,
		COMMISSION_ORDER,
		CONSTANT_SUM,
		PERCENTAGE,
		IS_DEFAULT_CURRENCY,
		CURRENCY,
		FROM_SUM,
		UNTIL_SUM,
		MIN_SUM,
		MAX_SUM,
		TAX_OVER_SUM,
		INCLUDE_TAX_IN_MIN_MAX,
		PREF_WITHOUT_DAILY_TURNOVER)
	SELECT
	REG.CODE AS TAX_CODE,
	DTL.CODE AS COMMISSION_CODE,
	REG.TYPE AS TYPE,
	ROW_NUMBER() OVER(PARTITION BY REG.CODE ORDER BY REG.CODE) AS COMMISSION_ORDER,
	CASE DTL.PREFERENCE_TYPE WHEN 1 THEN DTL.SUM_SOLID ELSE -1 END AS CONSTANT_SUM,
	CASE DTL.PREFERENCE_TYPE WHEN 0 THEN DTL.[PERCENT] ELSE -1 END AS PERCENTAGE,
	1 AS IS_DEFAULT_CURRENCY,
	''X'' AS CURRENCY,
	DTL.SUM_FOR_TAX_OVER + 0.01 AS FROM_SUM,
	CASE LEAD(DTL.PREFERENCE_CODE, 1, 0) OVER (ORDER BY REG.CODE, DTL.CODE, DTL.SUM_FOR_TAX_OVER) WHEN DTL.PREFERENCE_CODE THEN LEAD(DTL.SUM_FOR_TAX_OVER, 1, 0) OVER (ORDER BY REG.CODE, DTL.CODE, DTL.SUM_FOR_TAX_OVER) ELSE 99999999999 END AS UNTIL_SUM,
	DTL.MIN_SUM AS MIN_SUM,
	DTL.MAX_SUM AS MAX_SUM,
	0 AS TAX_OVER_SUM,
	0 AS INCLUDE_TAX_IN_MIN_MAX,
	DBO.CHECKBIT(DTL.STATUS, 16) AS PREF_WITHOUT_DAILY_TURNOVER
	FROM TAXES_INFO_TA AS REG WITH(NOLOCK)
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_EVENTS_TAXES AS PREF_EVT WITH(NOLOCK)
	ON REG.CODE = PREF_EVT.PREFERENCE_CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_PLANS_HDR AS HDR WITH(NOLOCK)
	ON PREF_EVT.PREF_PLAN_CODE = HDR.CODE
	INNER JOIN '+@SOURCE_SERVER_SCH+'.PREFERENCIAL_PLANS AS DTL WITH(NOLOCK)
	ON HDR.CODE = DTL.CODE_PREF_PLAN_HRD
	WHERE REG.TA_TABLE = '''+@REGISTER+'''
	AND REG.TYPE = ''Pref''
	AND PREF_EVT.TAX_CODE > 0
	ORDER BY REG.CODE, DTL.CODE, DTL.SUM_FOR_TAX_OVER'

	IF (@TRACE = 1)
		PRINT(@SQL)

	EXEC(@SQL)
GO
/***************************************************************************************************************/
-- Име          : 
-- Дата и час   : 
-- Задача       : 
-- Класификация : 
-- Описание     : 
-- Параметри    : 
/***************************************************************************************************************/